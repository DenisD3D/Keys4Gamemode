//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyUnusedAssignment
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        gradlePluginPortal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'
        classpath group: 'gradle.plugin.com.github.johnrengelman', name: 'shadow', version: '7.1.2'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = modVersion
group = modGroup
archivesBaseName = modBaseName

java.toolchain.languageVersion = JavaLanguageVersion.of(javaVersion)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: parchmentVersion + '-' + mcVersion
    //mappings channel: 'official', version: mcVersion

    runs {
        client {
            workingDirectory project.file('run_client')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            singleInstance true

            mods {
                keys4macros {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    library
    shade
    implementation.extendsFrom library
    shade.extendsFrom library
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

repositories {
    mavenCentral()
    maven { url = 'https://jitpack.io' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:' + mcVersion + '-' + forgeVersion
    library (group: 'com.github.denisd3d', name: 'config4j', version: '1.0.1')
}

shadowJar {
    classifier ''
    configurations = [project.configurations.shade]

    dependencies {
        exclude(dependency('com.electronwill.night-config:core'))
    }

    relocate 'ml.denisd3d.config4j', repackGroup + 'ml.denisd3d.config4j'
}

jar {
    classifier 'slim'

    manifest {
        attributes([
                "Specification-Title"     : "Keys4Macros",
                "Specification-Vendor"    : "DenisD3D",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : modVersion,
                "Implementation-Vendor"   : "DenisD3D",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

reobf {
    shadowJar { }
}

jar.finalizedBy('reobfJar')